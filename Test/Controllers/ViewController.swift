//
//  ViewController.swift
//  Test
//
//  Created by –ú–∞–∫–µ–π üòà on 12.09.2024.
//

import UIKit

class ViewController: UIViewController {
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä NetworkService
    private let networkService = NetworkService()
    
    // –°–æ–∑–¥–∞–µ–º UIView –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    private let chartViewContainer: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    private var chartViewManager: ChartViewManager?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor(red: 246/255, green: 246/255, blue: 246/255, alpha: 1)
        title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        navigationController?.navigationBar.prefersLargeTitles = true
        
        setupView()
        setupConstraints()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
        loadVisitors()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChartViewManager
        chartViewManager = ChartViewManager(containerView: chartViewContainer)
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä VisitorsGraph
    private lazy var visitorsGraph: VisitorsGraph = {
        let graph = VisitorsGraph()
        graph.translatesAutoresizingMaskIntoConstraints = false
        return graph
    }()
    
    private func setupView() {
        view.addSubview(visitorsGraph)
        view.addSubview(chartViewContainer)
    }
    
    private func setupConstraints() {
        
        NSLayoutConstraint.activate([
            chartViewContainer.topAnchor.constraint(equalTo: visitorsGraph.bottomAnchor, constant: 10),
            chartViewContainer.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            chartViewContainer.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            chartViewContainer.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
        
        NSLayoutConstraint.activate([
            visitorsGraph.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),
            visitorsGraph.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            visitorsGraph.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            visitorsGraph.heightAnchor.constraint(equalToConstant: 150)
        ])
    }
    
    private func loadVisitors() {
        networkService.fetchVisitors { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let visitorsCount):
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
                    self?.updateVisitorsGraph(with: visitorsCount)
                case .failure(let error):
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    print("Failed to fetch visitors: \(error)")
                }
            }
        }
    }
    
    private func updateVisitorsGraph(with visitorsCount: Int) {
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
        print("Visitors count: \(visitorsCount)")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VisitorsGraph
        visitorsGraph.updateVisitorsCount(visitorsCount)
    }
}
