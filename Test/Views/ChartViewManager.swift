////
////  ChartViewManager.swift
////  Test
////
////  Created by –ú–∞–∫–µ–π üòà on 12.09.2024.
////
//
//import UIKit
//import Charts
//import DGCharts
//
//class ChartViewManager: NSObject {
//    
//    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫
//    private weak var containerView: UIView?
//    
//    // –°—Å—ã–ª–∫–∞ –Ω–∞ LineChartView
//    private let lineChartView: LineChartView = {
//        let chartView = LineChartView()
//        chartView.translatesAutoresizingMaskIntoConstraints = false
//        return chartView
//    }()
//    
//    // –ö–Ω–æ–ø–∫–∏
//    private let dayButton: UIButton = {
//        let button = UIButton(type: .system)
//        button.setTitle("–ü–æ –¥–Ω—è–º", for: .normal)
//        button.translatesAutoresizingMaskIntoConstraints = false
//        return button
//    }()
//    
//    private let weekButton: UIButton = {
//        let button = UIButton(type: .system)
//        button.setTitle("–ü–æ –Ω–µ–¥–µ–ª—è–º", for: .normal)
//        button.translatesAutoresizingMaskIntoConstraints = false
//        return button
//    }()
//    
//    private let monthButton: UIButton = {
//        let button = UIButton(type: .system)
//        button.setTitle("–ü–æ –º–µ—Å—è—Ü–∞–º", for: .normal)
//        button.translatesAutoresizingMaskIntoConstraints = false
//        return button
//    }()
//    
//    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
//    init(containerView: UIView) {
//        self.containerView = containerView
//        super.init()
//        setupUI()
//    }
//    
//    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
//    private func setupUI() {
//        
//        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LineChartView
//        setupLineChartView()
//        
//        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
//        containerView!.addSubview(dayButton)
//        containerView!.addSubview(weekButton)
//        containerView!.addSubview(monthButton)
//        
//        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoLayout –¥–ª—è –∫–Ω–æ–ø–æ–∫
//        NSLayoutConstraint.activate([
//            dayButton.topAnchor.constraint(equalTo: (containerView?.safeAreaLayoutGuide.topAnchor)!, constant: 20),
//            dayButton.leadingAnchor.constraint(equalTo: containerView!.leadingAnchor, constant: 20),
//            
//            weekButton.topAnchor.constraint(equalTo: dayButton.topAnchor),
//            weekButton.leadingAnchor.constraint(equalTo: dayButton.trailingAnchor, constant: 20),
//            
//            monthButton.topAnchor.constraint(equalTo: dayButton.topAnchor),
//            monthButton.leadingAnchor.constraint(equalTo: weekButton.trailingAnchor, constant: 20),
//            
//            lineChartView.topAnchor.constraint(equalTo: dayButton.bottomAnchor, constant: 20),
//            lineChartView.leadingAnchor.constraint(equalTo: containerView!.leadingAnchor),
//            lineChartView.trailingAnchor.constraint(equalTo: containerView!.trailingAnchor),
//            lineChartView.bottomAnchor.constraint(equalTo: containerView!.bottomAnchor),
//        ])
//        
//        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
//        dayButton.addTarget(self, action: #selector(showDailyData), for: .touchUpInside)
//        weekButton.addTarget(self, action: #selector(showWeeklyData), for: .touchUpInside)
//        monthButton.addTarget(self, action: #selector(showMonthlyData), for: .touchUpInside)
//    }
//    
//    private func setupLineChartView() {
//        guard let containerView = containerView else { return }
//        containerView.addSubview(lineChartView)
//        lineChartView.backgroundColor = .white
//        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
//        lineChartView.xAxis.labelPosition = .bottom
//        lineChartView.rightAxis.enabled = false
//    }
//    
//    @objc private func showDailyData() {
//        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
//        updateChartData(for: .daily)
//    }
//    
//    @objc private func showWeeklyData() {
//        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º
//        updateChartData(for: .weekly)
//    }
//    
//    @objc private func showMonthlyData() {
//        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
//        updateChartData(for: .monthly)
//    }
//    
//    private func updateChartData(for interval: TimeInterval) {
//        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
//        var dataEntries: [ChartDataEntry] = []
//        
//        // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
//        let values = getValues(for: interval)
//        
//        for (index, value) in values.enumerated() {
//            let dataEntry = ChartDataEntry(x: Double(index), y: value)
//            dataEntries.append(dataEntry)
//        }
//        
//        let lineChartDataSet = LineChartDataSet(entries: dataEntries, label: "–î–∞–Ω–Ω—ã–µ")
//        lineChartDataSet.colors = [NSUIColor.blue] // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏
//        lineChartDataSet.valueColors = [NSUIColor.black] // –¶–≤–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
//        
//        let lineChartData = LineChartData(dataSet: lineChartDataSet)
//        lineChartView.data = lineChartData
//        lineChartView.notifyDataSetChanged() // –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
//    }
//    
//    private func getValues(for interval: TimeInterval) -> [Double] {
//        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
//        switch interval {
//        case .daily:
//            return [1, 2, 1, 3] // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
//        case .weekly:
//            return [2, 2.5, 3, 3.5] // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º
//        case .monthly:
//            return [5, 4, 7, 8] // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
//        }
//    }
//}
//
//enum TimeInterval {
//    case daily
//    case weekly
//    case monthly
//}


import UIKit
import Charts
import DGCharts

class ChartViewManager: NSObject {

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫
    private weak var containerView: UIView?

    // –°—Å—ã–ª–∫–∞ –Ω–∞ LineChartView
    private let lineChartView: LineChartView = {
        let chartView = LineChartView()
        chartView.translatesAutoresizingMaskIntoConstraints = false
        return chartView
    }()

    // –ö–Ω–æ–ø–∫–∏
    private let dayButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–ü–æ –¥–Ω—è–º", for: .normal)
        button.layer.borderColor = UIColor(red: 233, green: 233, blue: 234, alpha: 1).cgColor
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 20
        button.titleLabel?.textAlignment = .center
        button.titleLabel?.font = UIFont(name: "Gilroy", size: 15)
        button.setTitleColor(.white, for: .selected)
        button.setTitleColor(.black, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let weekButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–ü–æ –Ω–µ–¥–µ–ª—è–º", for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let monthButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–ü–æ –º–µ—Å—è—Ü–∞–º", for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ NetworkService
    private let networkService = NetworkService()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(containerView: UIView) {
        self.containerView = containerView
        super.init()
        setupUI()
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    private func setupUI() {
        setupLineChartView()
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        containerView!.addSubview(dayButton)
        containerView!.addSubview(weekButton)
        containerView!.addSubview(monthButton)
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoLayout –¥–ª—è –∫–Ω–æ–ø–æ–∫
        NSLayoutConstraint.activate([
            dayButton.topAnchor.constraint(equalTo: (containerView?.safeAreaLayoutGuide.topAnchor)!, constant: 10),
            dayButton.widthAnchor.constraint(equalToConstant: 114),
            dayButton.heightAnchor.constraint(equalToConstant: 32),
            dayButton.leadingAnchor.constraint(equalTo: containerView!.leadingAnchor, constant: 10),
            
            weekButton.topAnchor.constraint(equalTo: dayButton.topAnchor),
            weekButton.widthAnchor.constraint(equalToConstant: 114),
            weekButton.heightAnchor.constraint(equalToConstant: 32),
            weekButton.leadingAnchor.constraint(equalTo: dayButton.trailingAnchor, constant: 10),
            
            monthButton.topAnchor.constraint(equalTo: dayButton.topAnchor),
            monthButton.widthAnchor.constraint(equalToConstant: 114),
            monthButton.heightAnchor.constraint(equalToConstant: 32),
            monthButton.leadingAnchor.constraint(equalTo: weekButton.trailingAnchor, constant: 10),
            
            lineChartView.topAnchor.constraint(equalTo: dayButton.bottomAnchor, constant: 20),
            lineChartView.leadingAnchor.constraint(equalTo: containerView!.leadingAnchor),
            lineChartView.trailingAnchor.constraint(equalTo: containerView!.trailingAnchor),
            lineChartView.bottomAnchor.constraint(equalTo: containerView!.bottomAnchor),
        ])
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        dayButton.addTarget(self, action: #selector(showDailyData), for: .touchUpInside)
        weekButton.addTarget(self, action: #selector(showWeeklyData), for: .touchUpInside)
        monthButton.addTarget(self, action: #selector(showMonthlyData), for: .touchUpInside)
    }
    
    private func setupLineChartView() {
        guard let containerView = containerView else { return }
        containerView.addSubview(lineChartView)
        lineChartView.backgroundColor = .white
        lineChartView.xAxis.labelPosition = .bottom
        lineChartView.rightAxis.enabled = false
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    private func fetchVisitors(for interval: TimeInterval) {
        networkService.fetchVisitors { result in
            switch result {
            case .success(let visitorsCount):
                // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤, –æ–¥–Ω–∞–∫–æ –æ–±—ã—á–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
                let values = [Double(visitorsCount), Double(visitorsCount) + 5, Double(visitorsCount) - 2, Double(visitorsCount) + 3] // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                DispatchQueue.main.async {
                    self.updateChartData(for: interval, with: values)
                }
                
            case .failure(let error):
                print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è—Ö: \(error)")
            }
        }
    }

    @objc private func showDailyData() {
        fetchVisitors(for: .daily)
    }
    
    @objc private func showWeeklyData() {
        fetchVisitors(for: .weekly)
    }
    
    @objc private func showMonthlyData() {
        fetchVisitors(for: .monthly)
    }
    
    private func updateChartData(for interval: TimeInterval, with values: [Double]) {
        var dataEntries: [ChartDataEntry] = []

        for (index, value) in values.enumerated() {
            let dataEntry = ChartDataEntry(x: Double(index), y: value)
            dataEntries.append(dataEntry)
        }

        let lineChartDataSet = LineChartDataSet(entries: dataEntries, label: "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏")
        lineChartDataSet.colors = [NSUIColor.blue]
        lineChartDataSet.valueColors = [NSUIColor.black]

        let lineChartData = LineChartData(dataSet: lineChartDataSet)
        lineChartView.data = lineChartData
        lineChartView.notifyDataSetChanged()
    }
}

enum TimeInterval {
    case daily
    case weekly
    case monthly
}
